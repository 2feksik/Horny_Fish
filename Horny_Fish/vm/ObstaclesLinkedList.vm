function ObstaclesLinkedList.new 0
push constant 4
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 0
push constant 0
pop this 1
push argument 0
pop this 2
push constant 0
pop this 3
push pointer 0
return
function ObstaclesLinkedList.addNodeToEnd 0
push argument 0
pop pointer 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop this 0
push argument 1
pop this 1
push this 3
push constant 1
add
pop this 3
push constant 0
return
label IF_FALSE0
push this 1
push argument 1
call ObstacleNode.setNext 2
pop temp 0
push this 1
call ObstacleNode.getNext 1
pop this 1
push this 3
push constant 1
add
pop this 3
push this 3
push this 2
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call ObstaclesLinkedList.removeFirstNode 1
pop temp 0
push this 3
push constant 1
sub
pop this 3
label IF_FALSE1
push constant 0
return
function ObstaclesLinkedList.removeFirstNode 0
push argument 0
pop pointer 0
push this 0
call ObstacleNode.getNext 1
pop this 0
push constant 0
return
function ObstaclesLinkedList.update 4
push argument 0
pop pointer 0
push this 0
call ObstacleNode.getCurrent 1
pop local 2
push local 2
call Obstacle.getX 1
pop local 3
push local 3
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call ObstaclesLinkedList.removeFirstNode 1
pop temp 0
push this 3
push constant 1
sub
pop this 3
label IF_FALSE0
push this 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push this 3
lt
not
if-goto WHILE_END0
push local 0
call ObstacleNode.update 1
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ObstaclesLinkedList.draw 3
push argument 0
pop pointer 0
push this 0
pop local 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push this 3
lt
not
if-goto WHILE_END0
push local 0
call ObstacleNode.getCurrent 1
pop local 1
push local 1
call Obstacle.draw 1
pop temp 0
push local 0
call ObstacleNode.getNext 1
pop local 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function ObstaclesLinkedList.getObstaclesCount 0
push argument 0
pop pointer 0
push this 3
return
function ObstaclesLinkedList.getHead 0
push argument 0
pop pointer 0
push this 0
return
function ObstaclesLinkedList.dispose 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 3
lt
not
if-goto WHILE_END0
push pointer 0
call ObstaclesLinkedList.removeFirstNode 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
